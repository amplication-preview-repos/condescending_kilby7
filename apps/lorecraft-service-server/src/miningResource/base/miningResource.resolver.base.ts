/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { MiningResource } from "./MiningResource";
import { MiningResourceCountArgs } from "./MiningResourceCountArgs";
import { MiningResourceFindManyArgs } from "./MiningResourceFindManyArgs";
import { MiningResourceFindUniqueArgs } from "./MiningResourceFindUniqueArgs";
import { CreateMiningResourceArgs } from "./CreateMiningResourceArgs";
import { UpdateMiningResourceArgs } from "./UpdateMiningResourceArgs";
import { DeleteMiningResourceArgs } from "./DeleteMiningResourceArgs";
import { MiningResourceService } from "../miningResource.service";
@graphql.Resolver(() => MiningResource)
export class MiningResourceResolverBase {
  constructor(protected readonly service: MiningResourceService) {}

  async _miningResourcesMeta(
    @graphql.Args() args: MiningResourceCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [MiningResource])
  async miningResources(
    @graphql.Args() args: MiningResourceFindManyArgs
  ): Promise<MiningResource[]> {
    return this.service.miningResources(args);
  }

  @graphql.Query(() => MiningResource, { nullable: true })
  async miningResource(
    @graphql.Args() args: MiningResourceFindUniqueArgs
  ): Promise<MiningResource | null> {
    const result = await this.service.miningResource(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => MiningResource)
  async createMiningResource(
    @graphql.Args() args: CreateMiningResourceArgs
  ): Promise<MiningResource> {
    return await this.service.createMiningResource({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => MiningResource)
  async updateMiningResource(
    @graphql.Args() args: UpdateMiningResourceArgs
  ): Promise<MiningResource | null> {
    try {
      return await this.service.updateMiningResource({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => MiningResource)
  async deleteMiningResource(
    @graphql.Args() args: DeleteMiningResourceArgs
  ): Promise<MiningResource | null> {
    try {
      return await this.service.deleteMiningResource(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
