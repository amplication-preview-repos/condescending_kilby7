/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Biome } from "./Biome";
import { BiomeCountArgs } from "./BiomeCountArgs";
import { BiomeFindManyArgs } from "./BiomeFindManyArgs";
import { BiomeFindUniqueArgs } from "./BiomeFindUniqueArgs";
import { CreateBiomeArgs } from "./CreateBiomeArgs";
import { UpdateBiomeArgs } from "./UpdateBiomeArgs";
import { DeleteBiomeArgs } from "./DeleteBiomeArgs";
import { BiomeService } from "../biome.service";
@graphql.Resolver(() => Biome)
export class BiomeResolverBase {
  constructor(protected readonly service: BiomeService) {}

  async _biomesMeta(
    @graphql.Args() args: BiomeCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Biome])
  async biomes(@graphql.Args() args: BiomeFindManyArgs): Promise<Biome[]> {
    return this.service.biomes(args);
  }

  @graphql.Query(() => Biome, { nullable: true })
  async biome(
    @graphql.Args() args: BiomeFindUniqueArgs
  ): Promise<Biome | null> {
    const result = await this.service.biome(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Biome)
  async createBiome(@graphql.Args() args: CreateBiomeArgs): Promise<Biome> {
    return await this.service.createBiome({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Biome)
  async updateBiome(
    @graphql.Args() args: UpdateBiomeArgs
  ): Promise<Biome | null> {
    try {
      return await this.service.updateBiome({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Biome)
  async deleteBiome(
    @graphql.Args() args: DeleteBiomeArgs
  ): Promise<Biome | null> {
    try {
      return await this.service.deleteBiome(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
