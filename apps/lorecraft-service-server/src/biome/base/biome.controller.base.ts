/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { BiomeService } from "../biome.service";
import { BiomeCreateInput } from "./BiomeCreateInput";
import { Biome } from "./Biome";
import { BiomeFindManyArgs } from "./BiomeFindManyArgs";
import { BiomeWhereUniqueInput } from "./BiomeWhereUniqueInput";
import { BiomeUpdateInput } from "./BiomeUpdateInput";

export class BiomeControllerBase {
  constructor(protected readonly service: BiomeService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Biome })
  async createBiome(@common.Body() data: BiomeCreateInput): Promise<Biome> {
    return await this.service.createBiome({
      data: data,
      select: {
        createdAt: true,
        description: true,
        id: true,
        name: true,
        uniqueCharacteristics: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Biome] })
  @ApiNestedQuery(BiomeFindManyArgs)
  async biomes(@common.Req() request: Request): Promise<Biome[]> {
    const args = plainToClass(BiomeFindManyArgs, request.query);
    return this.service.biomes({
      ...args,
      select: {
        createdAt: true,
        description: true,
        id: true,
        name: true,
        uniqueCharacteristics: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Biome })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async biome(
    @common.Param() params: BiomeWhereUniqueInput
  ): Promise<Biome | null> {
    const result = await this.service.biome({
      where: params,
      select: {
        createdAt: true,
        description: true,
        id: true,
        name: true,
        uniqueCharacteristics: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Biome })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateBiome(
    @common.Param() params: BiomeWhereUniqueInput,
    @common.Body() data: BiomeUpdateInput
  ): Promise<Biome | null> {
    try {
      return await this.service.updateBiome({
        where: params,
        data: data,
        select: {
          createdAt: true,
          description: true,
          id: true,
          name: true,
          uniqueCharacteristics: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Biome })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteBiome(
    @common.Param() params: BiomeWhereUniqueInput
  ): Promise<Biome | null> {
    try {
      return await this.service.deleteBiome({
        where: params,
        select: {
          createdAt: true,
          description: true,
          id: true,
          name: true,
          uniqueCharacteristics: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
