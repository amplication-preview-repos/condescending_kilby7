/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, PlayerData as PrismaPlayerData } from "@prisma/client";

export class PlayerDataServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.PlayerDataCountArgs, "select">
  ): Promise<number> {
    return this.prisma.playerData.count(args);
  }

  async playerDataItems(
    args: Prisma.PlayerDataFindManyArgs
  ): Promise<PrismaPlayerData[]> {
    return this.prisma.playerData.findMany(args);
  }
  async playerData(
    args: Prisma.PlayerDataFindUniqueArgs
  ): Promise<PrismaPlayerData | null> {
    return this.prisma.playerData.findUnique(args);
  }
  async createPlayerData(
    args: Prisma.PlayerDataCreateArgs
  ): Promise<PrismaPlayerData> {
    return this.prisma.playerData.create(args);
  }
  async updatePlayerData(
    args: Prisma.PlayerDataUpdateArgs
  ): Promise<PrismaPlayerData> {
    return this.prisma.playerData.update(args);
  }
  async deletePlayerData(
    args: Prisma.PlayerDataDeleteArgs
  ): Promise<PrismaPlayerData> {
    return this.prisma.playerData.delete(args);
  }
}
