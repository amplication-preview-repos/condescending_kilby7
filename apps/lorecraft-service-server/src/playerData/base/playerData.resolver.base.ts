/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { PlayerData } from "./PlayerData";
import { PlayerDataCountArgs } from "./PlayerDataCountArgs";
import { PlayerDataFindManyArgs } from "./PlayerDataFindManyArgs";
import { PlayerDataFindUniqueArgs } from "./PlayerDataFindUniqueArgs";
import { CreatePlayerDataArgs } from "./CreatePlayerDataArgs";
import { UpdatePlayerDataArgs } from "./UpdatePlayerDataArgs";
import { DeletePlayerDataArgs } from "./DeletePlayerDataArgs";
import { PlayerDataService } from "../playerData.service";
@graphql.Resolver(() => PlayerData)
export class PlayerDataResolverBase {
  constructor(protected readonly service: PlayerDataService) {}

  async _playerDataItemsMeta(
    @graphql.Args() args: PlayerDataCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [PlayerData])
  async playerDataItems(
    @graphql.Args() args: PlayerDataFindManyArgs
  ): Promise<PlayerData[]> {
    return this.service.playerDataItems(args);
  }

  @graphql.Query(() => PlayerData, { nullable: true })
  async playerData(
    @graphql.Args() args: PlayerDataFindUniqueArgs
  ): Promise<PlayerData | null> {
    const result = await this.service.playerData(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => PlayerData)
  async createPlayerData(
    @graphql.Args() args: CreatePlayerDataArgs
  ): Promise<PlayerData> {
    return await this.service.createPlayerData({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => PlayerData)
  async updatePlayerData(
    @graphql.Args() args: UpdatePlayerDataArgs
  ): Promise<PlayerData | null> {
    try {
      return await this.service.updatePlayerData({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => PlayerData)
  async deletePlayerData(
    @graphql.Args() args: DeletePlayerDataArgs
  ): Promise<PlayerData | null> {
    try {
      return await this.service.deletePlayerData(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
