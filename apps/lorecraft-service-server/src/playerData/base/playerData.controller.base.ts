/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { PlayerDataService } from "../playerData.service";
import { PlayerDataCreateInput } from "./PlayerDataCreateInput";
import { PlayerData } from "./PlayerData";
import { PlayerDataFindManyArgs } from "./PlayerDataFindManyArgs";
import { PlayerDataWhereUniqueInput } from "./PlayerDataWhereUniqueInput";
import { PlayerDataUpdateInput } from "./PlayerDataUpdateInput";

export class PlayerDataControllerBase {
  constructor(protected readonly service: PlayerDataService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: PlayerData })
  async createPlayerData(
    @common.Body() data: PlayerDataCreateInput
  ): Promise<PlayerData> {
    return await this.service.createPlayerData({
      data: data,
      select: {
        createdAt: true,
        id: true,
        inventory: true,
        progress: true,
        updatedAt: true,
        username: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [PlayerData] })
  @ApiNestedQuery(PlayerDataFindManyArgs)
  async playerDataItems(@common.Req() request: Request): Promise<PlayerData[]> {
    const args = plainToClass(PlayerDataFindManyArgs, request.query);
    return this.service.playerDataItems({
      ...args,
      select: {
        createdAt: true,
        id: true,
        inventory: true,
        progress: true,
        updatedAt: true,
        username: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: PlayerData })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async playerData(
    @common.Param() params: PlayerDataWhereUniqueInput
  ): Promise<PlayerData | null> {
    const result = await this.service.playerData({
      where: params,
      select: {
        createdAt: true,
        id: true,
        inventory: true,
        progress: true,
        updatedAt: true,
        username: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: PlayerData })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updatePlayerData(
    @common.Param() params: PlayerDataWhereUniqueInput,
    @common.Body() data: PlayerDataUpdateInput
  ): Promise<PlayerData | null> {
    try {
      return await this.service.updatePlayerData({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          inventory: true,
          progress: true,
          updatedAt: true,
          username: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: PlayerData })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deletePlayerData(
    @common.Param() params: PlayerDataWhereUniqueInput
  ): Promise<PlayerData | null> {
    try {
      return await this.service.deletePlayerData({
        where: params,
        select: {
          createdAt: true,
          id: true,
          inventory: true,
          progress: true,
          updatedAt: true,
          username: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
